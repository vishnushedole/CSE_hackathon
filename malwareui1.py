import hashlib
import mysql.connector
import os.path
import pefile
from sklearn.metrics import confusion_matrix
import joblib 
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

mydb = mysql.connector.connect(
host="localhost",
 user="root",
 passwd="",
 database="siganturesdb"
)

from tkinter import *

from tkinter import filedialog

import tkinter.font as font

import os

Data = pd.read_csv("MalwareData.csv",sep="|")
Data.info()

# Separation of Malware and Legit data

legit_data = Data[0:41323]
mal_data = Data[41324:]
print("Legit files dataset :",legit_data.shape)
print("Malware files dataset :",mal_data.shape)

# Cleaning data 

New_Data = Data.drop(['Name','md5'],axis=1).values

# Attribute selection


df = pd.DataFrame(New_Data)
corr_mat = df.corr()
attribute_list = corr_mat[54]
selected_att = []

sum = 0

for i in range(54):
    sum+=attribute_list[i]
    
avg = sum/54
not_selected = []

for i in range(55):
    if attribute_list[i]>avg:
        selected_att.append(i)
    else:
        not_selected.append(i)

not_selected.append(54)
new_df = df.drop(df.columns[not_selected],axis=1)
for i in range(22):
    print(i," ",Data.columns[selected_att[i]+2]," ",attribute_list[selected_att[i]])

# Spliting data set into training and testing data.
# Training Model using training data

labels = Data['legitimate'].values

legit_train,legit_test,mal_train,mal_test =train_test_split(new_df,labels,test_size=0.2)
classifier1 = RandomForestClassifier()
classifier1.fit(legit_train,mal_train)

# # Printing accuracy of the model
print("The accuracy of the model is ",classifier1.score(legit_test,mal_test)*100)

# Confusion matrix 
result = classifier1.predict(legit_test)
conf_mat = confusion_matrix(mal_test,result)
print(conf_mat)


# Precision
precision = conf_mat[0][0]/(conf_mat[0][0]+conf_mat[0][1])
print("Model precision is : ",precision)

# # Recall
recall = conf_mat[0][0]/(conf_mat[0][0]+conf_mat[1][0])
print("Model recall is :",recall)

# # F1-score
F1_score = (2*precision*recall)/(precision+recall)
print("F1-score :",F1_score)
import signBasedMD

filePath = ""
# Function for opening the
# file explorer window
def browseFiles():
	filename = filedialog.askopenfilename(initialdir = "/",
										title = "Select a File",
										filetypes = (("Text files",
														"*.txt*"),
													("all files",
														"*.*")))
	
	
	label_file_explorer.configure(text="File Opened: "+filename)
	global filePath 
	filePath = filename
	print(filePath)
	return filename

def browseFolder():
	dirname = filedialog.askdirectory(initialdir="/",title="Select a Folder")

	label_file_explorer.configure(text="Folder opened: "+dirname)
	global filePath 
	filePath = dirname
	print(filePath)
	return dirname

def deletefileorfolder():
	filename=browseFiles()
	if(os.path.isfile(filename)):
		os.remove(filename)
        
def readFile(file):
	
	BLOCK_SIZE = 65536 
	if(os.path.isfile(file)):
		
		file_hash = hashlib.sha256() 
		with open(file, 'rb') as f: 
			fb = f.read(BLOCK_SIZE) 
			while len(fb) > 0: 
				file_hash.update(fb) 
				fb = f.read(BLOCK_SIZE) 
		signature = file_hash.hexdigest()
		
		search(signature)
	elif(os.path.isdir(file)):
		filesList = os.listdir(file)
		print(filesList)
		for i in range(len(filesList)):
			newPath = file + "\\" + filesList[i]
			if(os.path.isdir(newPath)):
				readFile(newPath)
			else:
				file_hash = hashlib.sha256() 
				with open(newPath, 'rb') as f: 
					fb = f.read(BLOCK_SIZE) 
					while len(fb) > 0: 
						file_hash.update(fb) 
						fb = f.read(BLOCK_SIZE) 
				signature = file_hash.hexdigest()
				
				search(signature)
	else:
		print("No such file or directory")

def search(signature):
	mycursor = mydb.cursor()
	query = 'select * from siganturesdb.hash_table where Hashcode = %s;'
	mycursor.execute(query,[signature])
	output = mycursor.fetchall()
	if(len(output)):
		print(output)
		print("is malicious")
	else:
		randomForest(filePath)


def callReadFile():
	readFile(filePath)

																								
# Create the root window

def randomForest(filePath):
	
	classifier = joblib.load('model.sav')
	avg_values = new_df.mean()
	avg_values = pd.DataFrame(avg_values)
	pe = pefile.PE(filePath)
	avg_SectionsMinRawsize = avg_values.iloc[12].values[0]
	avg_SectionsMinVirtualsize = avg_values.iloc[13].values[0]
	avg_ImportsNbDLL = avg_values.iloc[14].values[0]
	avg_ImportsNb = avg_values.iloc[15].values[0]
	avg_ImportsNbOrdinal = avg_values.iloc[16].values[0]
	avg_ExportNb = avg_values.iloc[17].values[0]
	avg_ResourcesNb = avg_values.iloc[18].values[0]
	avg_ResourcesMinEntropy = avg_values.iloc[19].values[0]
	avg_VersionInformationSize = avg_values.iloc[19].values[0]
	sample = [pe.FILE_HEADER.Machine,pe.FILE_HEADER.SizeOfOptionalHeader,pe.FILE_HEADER.Characteristics,pe.OPTIONAL_HEADER.MajorLinkerVersion,pe.OPTIONAL_HEADER.SizeOfCode,pe.OPTIONAL_HEADER.ImageBase,pe.OPTIONAL_HEADER.FileAlignment,pe.OPTIONAL_HEADER.MajorImageVersion,pe.OPTIONAL_HEADER.MinorImageVersion,pe.OPTIONAL_HEADER.MajorSubsystemVersion,pe.OPTIONAL_HEADER.SizeOfHeaders,pe.OPTIONAL_HEADER.Subsystem,avg_SectionsMinRawsize,avg_SectionsMinVirtualsize,avg_ImportsNbDLL,avg_ImportsNb,avg_ImportsNbOrdinal,avg_ExportNb,avg_ResourcesNb,avg_ResourcesMinEntropy,avg_VersionInformationSize]
	sample = pd.DataFrame([sample],columns=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])
	if(classifier.predict(sample.values)[0]):
		print("The file specified by the path "+ filePath + " is SAFE")
	else:
		print("File malicious!!")
def deletefileorfolder():
	filename=filePath
	if(os.path.isfile(filename)):
		os.remove(filename)
		label_del = Label(frame,text="File Deleted",bg="gold",fg="black",font=comic)
		label_del.place(x=170,y=350)
		print("file deleted")
	else:
		label_inv = Label(frame,text="Invalid File",bg="gold",fg="black",font=comic)
		label_inv.place(x=170,y=350)
		print("not a file")

window = Tk()

# Set window title
window.title('Malware Detector')

# Set window size
window.geometry("1200x670")
window.resizable(False,False)

# img= PhotoImage(file="malwareimg5res.png", master= window)
# img_label= Label(window,image=img)
# img_label.place(x=0,y=0)
frame1=Frame(window, width=1200, height=670,bg="dodgerblue4")
frame1.place(x=0, y=0)

roman20 = font.Font(family="roman",size=20,weight="bold",underline=1)
courier15 = font.Font(family="courier",size=15)
arial10 = font.Font(family="arial",size=15)
comic30 = font.Font(family="Comic Sans MS",size=30)
comic = font.Font(family="Comic Sans MS",size=20)
comic10 = font.Font(family="Comic Sans MS",size=15)

frame=Frame(window, width=1000, height=500,bg="gold")
frame.place(x=100, y=100)

heading = Label(frame,text="Malware Detector",fg="black",bg="gold",font=comic30)
heading.place(x=320,y=10)

del_file_label = Label(frame,text ="Do you want to delete the selected file/folder?",font=comic10,fg="black",bg="gold")
del_file_label.place(x=100,y=300)

del_img = PhotoImage(file="del.png")
button_del = Button(frame,image=del_img,command=deletefileorfolder)
button_del.place(x=100,y=350)


label_file_explorer = Label(frame,text = "Select the file to scan:",fg = "black",bg="gold",font=comic10)
label_file_explorer.place(x=100,y=100)

label_browse = Label(frame,text="Browse File",bg="gold",fg="black",font=comic10)
label_browse.place(x=120,y=150)

browse_img = PhotoImage(file="browse.png")
button_explore = Button(frame,image=browse_img,command = browseFiles)
button_explore.place(x=75,y=150)



# brfol_img = PhotoImage(file="brfol.png")
# button_exit = Button(frame,image=brfol_img,command=browseFolder)
# button_exit.place(x=275,y=150)

label_scan = Label(frame,text="Scan",bg="gold",fg="black",font=comic10)
label_scan.place(x=525,y=150)

scan_img = PhotoImage(file="scan.png")
button_scan = Button(frame,image=scan_img,command = callReadFile)
button_scan.place(x=475,y=150)

label_exit = Label(frame,text="Exit",bg="gold",fg="black",font=comic10)
label_exit.place(x=700,y=150)

exit_img = PhotoImage(file="exit.png")
button_exit = Button(frame,image=exit_img,command = exit)
button_exit.place(x=650,y=150)


window.mainloop()
